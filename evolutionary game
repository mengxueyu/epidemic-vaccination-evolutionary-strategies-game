%策略更新规则

%基于无标度网络上的囚徒困境模型
clc;%清除屏幕
clear;%清除所有内存变量

m0=5; %初始个体数
t0=9995; %输入新增个体数995
q=0.6; %决定第二条边连接方式的概率

%初始化传染率beta，康复率miu
fai=0.1;
miu=0.6;
beta=fai*miu;
yipsilo=0.4; %自身免疫，从感染状态变成康复状态的概率
alpha=0.01; %死亡率
kapa=1;

%设置传染时间t为nums
generation=1; %迭代次数
times=50;  %博弈次数
TT=1;

c = 0.1;
Ci = 1;
Cv = c*Ci;
e=0.6; %疫苗有效率
d=0.8; %疫苗失效补贴率

GlistS=[];
GlistE=[];
GlistI=[];
GlistR=[];
GlistEV=[];
Glistdead=[];
GlistV=[];

for T=1:generation
    %初始网络的生成
    for i=1:m0 %将初始节点全部连接起来
        Ent(i).connums=m0-1; %每个节点的连接数（全连接），初始为全连接
        Ent(i).con=[1:i-1 i+1:m0]'; %每个节点的连接列表，排除自己
        Ent(i).H=[]; %由个体连接数决定的每个个体在轮盘赌上的上届变量
        Ent(i).L=[]; %由个体连接数决定的每个个体在轮盘赌上的下届变量
    end
    m=m0;
    
    for t=1:t0 %增加新的个体，新增个体总数t0
        Xsum=0;%统计个体连接数的变量
        for i=1:m
            Xsum=Xsum+Ent(i).connums; %累计个体连接数
            Ent(i).H=Xsum; %产生每个个体在轮盘赌上的位置
            Ent(i).L=Ent(i).H-Ent(i).connums;
        end
        %此时Xsum变量已经为现有所有个体连接数的加和
        
        Ent(m+1).connums=2; %新增节点用m+1表示，它带有两个连接
        Xsel=fix(Xsum*rand(1)+1); %生成一个介于1~Xsum之间的随机整数
        
        for i=1:m
            if(Ent(i).L<Xsel)&&(Ent(i).H>=Xsel)
                %用生成的随机整数把连接的节点选出来，实现按概率选择
                Ent(i).connums=Ent(i).connums+1;
                %第一个被选中的现有节点连接数加1
                Ent(i).con=[Ent(i).con;m+1];
                %第一个被选中的节点更新连接列表，将新节点加入连接列表
                Ent(m+1).con=[i];
                %新节点将第一个被选中的节点放入连接列表
                Xselnum=i;
                %保存第一个被选中的节点编号到变量Xselnum，选择第二条边时会用到
            end
        end
        %此时新节点m+1的第一条连接完成，下面开始连接第二条边
        if rand(1)<=q %以概率q连接到已选址节点的邻居上
            Xneb=fix((Ent(Xselnum).connums-1)*rand(1)+1);
            %生成一个介于1~（Ent(Xselnum).connums-1）之间的随机整数，即从第一个已选中节点的原有邻居中随机选中一个，排除掉新个体自己
            Ent(Ent(Xselnum).con(Xneb)).con=[Ent(Ent(Xselnum).con(Xneb)).con;m+1];
            %将新个体连接到第二个选中的节点上，将新个体编号写入第二个选中节点的连接列表中
            Ent(Ent(Xselnum).con(Xneb)).connums=Ent(Ent(Xselnum).con(Xneb)).connums+1;
            %将第二个选中节点的连接数加1
            Ent(m+1).con=[Ent(m+1).con;Ent(Xselnum).con(Xneb)];
            %更新新增节点的连接列表，将第二个被选中节点的编号加入
            %上面程序中（Ent(Xselnum).connums-1）为第一个被选中加点的连接数减1
            %上面程序中Ent(Xselnum).con(Xneb)是第二个被选中节点的编号
        else %以概率1-q按照BA模型的连接机制连接，排除掉第一个已选中节点
            Fselected=0;
            while Fselected==0
                Xsell=fix(Xsum*rand(1)+1);
                %生成一个介于1~Xsum之间的随机整数，Xsum为现有原有个体连接数的加和
                for i=1:m
                    if(Ent(i).L<Xsell)&&(Ent(i).H>=Xsell)
                        if Xselnum~=i %排除掉第一个已被选中的节点
                            Ent(i).connums=Ent(i).connums+1; %给第二个被选中个体的连接数加1
                            Ent(i).con=[Ent(i).con;m+1];%更新第二个被选中个体的连接列表
                            Ent(m+1).con=[Ent(m+1).con;i];
                            %更新新增节点的连接列表，将第二个被选中节点的编号加入
                            Fselected=1;
                        end
                    end
                end
            end
        end
        %两条边连接完成，一个新节点已经加入网络
        m=m+1;
    end%对应新增节点的循环 for t:t0
    nums=m;%所有的t0个新节点已经加入网络
    %网络结构已经生成完毕，网络中总共有Nums个节点，下面开始传染
    
    %计算该无标度网络的平均度
    sumk=0; %计算网络的总度数和平均度数
    connumslist=[]; %按照节点顺序排列输出度数，方便后面索引
    for i=1:nums
        sumk=sumk+Ent(i).connums;
        connumslist=[connumslist;Ent(i).connums];
    end
    k=sumk/nums;
    klist=find(connumslist==k);  %从度数为4的节点中随机找到一个节点作为传染病源
    %初始感染节点：小连通度节点；度均值节点(网络平均度为4)；大连通度节点，先做度均值节点
    Iorigin=klist(ceil(length(klist)*rand));
    
    %模型SEIRV初始化
    listS=[];
    listE=[];
    listI=[];
    listR=[];
    listEV=[];
    listdead=[];
    listV=[];

    %初始化网络
    S=[1,0,0,0,0]; %susceptible易感染者
    E=[0,1,0,0,0]; %exposed
    I=[0,0,1,0,0]; %感染者
    R=[0,0,0,1,0]; %免疫者
    V=[0,0,0,0,1]; %疫苗接种者
    EV=[1,1,1,1,1]; %有效疫苗接种者
    dead=[0,0,0,0,0]; %感染者死亡
    
    %初始化SI状态
    for i=1:nums
        if i==Iorigin
            Ent(i).state=E;
        else
            if rand<1/0.1
                Ent(i).state=V;
            else
                Ent(i).state=S;
            end
        end
    end
    
    %下面开始传染博弈
    for t=1:times
        countS=0;
        countE=0;
        countI=0;
        countR=0;
        countEV=0;
        countdead=0;
        countV=0;
        
        for i=1:nums
            if Ent(i).state==S
                if rand<beta
                    Ent(i).nextstate=E;
                    Ent(i).Ui=-Ci;
                else
                    Ent(i).nextstate=S;
                    Ent(i).Ui=0;
                end
            else
                if Ent(i).state==E
                    if rand<yipsilo
                        Ent(i).nextstate=I;
                        Ent(i).Ui=-Ci;
                    else
                        Ent(i).nextstate=E;
                        Ent(i).Ui=-Ci;
                    end
                else
                    if Ent(i).state==I
                        if rand<alpha
                            Ent(i).nextstate=dead;
                            Ent(i).Ui=-10000000;
                        else
                            if rand<miu
                                Ent(i).nextstate=R;
                                Ent(i).Ui=-Ci;
                            else
                                Ent(i).nextstate=I;
                                Ent(i).Ui=-Ci;
                            end
                        end
                    else
                        if Ent(i).state==V
                            if rand<e
                                Ent(i).nextstate=EV;
                                Ent(i).Ui=-Cv;
                            else
                                Ent(i).nextstate=S;
                                Ent(i).Ui=-Cv-(1-d)*Ci;
                            end
                        end
                    end
                end
            end
        end
                
        %策略更新
        for i=1:nums
            if Ent(i).state==S
                suiji = ceil(Ent(i).connums*rand); %随机选一个邻接节点比较收益
                a=Ent(i).Ui;
                b=Ent(Ent(i).con(suiji)).Ui;
                
                if rand< 1./(1+exp((a-b)./kapa))
                    if Ent(Ent(i).con(suiji)).state==E 
                        Ent(i).nextstate=S;
                    else
                         if Ent(Ent(i).con(suiji)).state==I
                             Ent(i).nextstate=S;
                         else
                             if Ent(Ent(i).con(suiji)).state==R
                                 Ent(i).nextstate=S;
                             else
                                 if Ent(Ent(i).con(suiji)).state==EV 

                                     Ent(i).nextstate = V;
                                 else
                                     if Ent(Ent(i).con(suiji)).state==V
                                         Ent(i).nextstate = V;
                                     end
                                 end
                             end
                         end
                    end
                else
                    Ent(i).nextstate==S;
                end
            else
                1;
            end
        end
      
        %统计数目
        for i=1:nums
            if Ent(i).state==S
                countS=countS+1;
            else
                if Ent(i).state==E
                    countE=countE+1;
                else
                    if Ent(i).state==I
                        countI=countI+1;
                    else
                        if Ent(i).state==R
                            countR=countR+1;
                        else
                            if Ent(i).state == EV
                                countEV=countEV+1;
                            else
                                1;
                            end
                        end
                    end
                end
            end
        end

        %状态更新
        for i=1:nums
            Ent(i).state=Ent(i).nextstate;
        end
    
        listS=[listS,countS/nums];
        listE=[listE,countE/nums];
        listI=[listI,countI/nums];
        listR=[listR,countR/nums];
        listEV=[listEV,countEV/nums];
        listdead=[listdead,countdead/nums];
    end
    GlistS=[GlistS;listS];
    GlistE=[GlistE;listE];
    GlistI=[GlistI;listI];
    GlistR=[GlistR;listR];
    GlistEV=[GlistEV;listEV];
    Glistdead=[Glistdead;listdead];
    
    str=sprintf('循环到第 %g 次',T);
    disp(str);
    
    TT=TT+1;
end

S_t=sum(GlistS)./generation;
E_t=sum(GlistE)./generation;
I_t=sum(GlistI)./generation;
R_t=sum(GlistR)./generation;
EV_t=sum(GlistEV)./generation;
dead_t=sum(Glistdead)./generation;

x=1:times;
figure
plot(x,S_t,'-or',x,E_t,'-^g',x,I_t,'-xb',x,R_t,'-sy',x,EV_t,'-*k')
xlabel('传染时间')
ylabel('SIRV密度')
legend('P_S','P_E','P_I','P_R','P_EV')
